{"version":3,"file":"static/js/927.3d902e08.chunk.js","mappings":"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","sources":["hooks/useFetchDetailsOneFilm.jsx","hooks/useFetchCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","hooks/useFetchReviewsOfTheFilm.jsx","services/API.js","views/ReviewsView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieDetails } from 'services/API';\n\nexport function useFetchDetailsOneFilm() {\n  const [film, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() =>  {\n      async function getMovie() {\n        setIsLoading(true);\n        try {\n          const movieData = await movieDetails(movieId);\n          setFilm(movieData);\n        } catch (error) {\n          console.log(error.message);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n      getMovie();\n  }, [movieId]);\n  \n  return { film, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/API';\n\nexport function useFetchCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { searchMovies } from 'services/API';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nexport function useFetchSearchMovieOnRequest() {\n  const [search, setSearch] = useSearchParams();\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const query = search.get('query');\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(query);\n        if (films.results.length === 0) {\n          return toast.error(\n            `Nothing was found for the query \"${query}\", please specify your query)`\n          );\n        }\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [query, search]);\n  return { query, setSearch, filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/API';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieReviews } from 'services/API';\n\nexport function useFetchReviewsOfTheFilm() {\n  const [review, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const review = await movieReviews(movieId);\n        setReview(review.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { review, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = '191efeeb865bc4c787fee73d3a367440';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import React from 'react';\nimport { useFetchReviewsOfTheFilm } from 'hooks';\nimport { Text, UnorderedList, ListItem } from '@chakra-ui/react';\n\nfunction ReviewsView() {\n  const { review, isLoading } = useFetchReviewsOfTheFilm();\n\n  return (\n    <>\n      {isLoading && '...Loading'}\n      {review.length !== 0 ? (\n        <UnorderedList spacing={3}>\n          {review.map(({ id, author, content }) => (\n            <ListItem key={id}>\n              <Text as=\"h2\" fontWeight={700}>\n                Author: {author}\n              </Text>\n              <Text as=\"p\">{content}</Text>\n            </ListItem>\n          ))}\n        </UnorderedList>\n      ) : (\n        <Text fontSize=\"6xl\">No Reviews</Text>\n      )}\n    </>\n  );\n}\n\nexport default ReviewsView;\n"],"names":["useFetchDetailsOneFilm","useState","film","setFilm","isLoading","setIsLoading","movieId","useParams","useEffect","movieDetails","movieData","console","log","message","getMovie","useFetchCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","useSearchParams","search","setSearch","filmsBySearch","setFilmsBySearch","query","get","searchMovies","films","results","length","toast","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","useFetchReviewsOfTheFilm","review","setReview","movieReviews","propTypes","PropTypes","IMAGE_URL","axios","APi_KEY","response","data","spacing","map","id","author","content","as","fontWeight","fontSize"],"sourceRoot":""}