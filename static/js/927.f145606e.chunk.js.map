{"version":3,"file":"static/js/927.f145606e.chunk.js","mappings":"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","sources":["hooks/useFetchDetailsOneFilm.jsx","hooks/useFetchCastOfTheFilm.jsx","hooks/useFetchSearchMovieOnRequest.jsx","hooks/useFetchTrendingFilms.jsx","hooks/useFetchReviewsOfTheFilm.jsx","services/API.js","views/ReviewsView.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { movieDetails } from 'services/API';\n\nexport function useFetchDetailsOneFilm() {\n  const [filmDetails, setFilm] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (isNaN(movieId) || movieId.length > 6) {\n      navigate('/');\n    } else {\n      async function getMovie() {\n        setIsLoading(true);\n        try {\n          const movieData = await movieDetails(movieId);\n          setFilm(movieData);\n        } catch (error) {\n          console.log(error.message);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n      getMovie();\n    }\n  }, [movieId, navigate]);\n  return { filmDetails, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieCredits } from 'services/API';\n\nexport function useFetchCastOfTheFilm() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const cast = await movieCredits(movieId);\n        setCast(cast.cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { cast, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { searchMovies } from 'services/API';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\n\nexport function useFetchSearchMovieOnRequest(searchQuery) {\n  const [filmsBySearch, setFilmsBySearch] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const films = await searchMovies(searchQuery);\n        if (films.results.length === 0) {\n          return toast.error(\n            `Nothing was found for the query \"${searchQuery}\", please specify your query)`\n          );\n        }\n        setFilmsBySearch(films.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [searchQuery]);\n  return { filmsBySearch, isLoading };\n}\n\nuseFetchSearchMovieOnRequest.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { getTrending } from '../services/API';\n\nexport function useFetchTrendingFilms() {\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const trendingFilms = await getTrending();\n        setFilms(trendingFilms);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, []);\n\n  return { films, isLoading };\n}\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { movieReviews } from 'services/API';\n\nexport function useFetchReviewsOfTheFilm() {\n  const [review, setReview] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  let { movieId } = useParams();\n\n  useEffect(() => {\n    async function getMovies() {\n      setIsLoading(true);\n      try {\n        const review = await movieReviews(movieId);\n        setReview(review.results);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getMovies();\n  }, [movieId]);\n\n  return { review, isLoading };\n}\n","import axios from 'axios';\n\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst APi_KEY = '191efeeb865bc4c787fee73d3a367440';\n\nexport async function getTrending() {\n  const response = await axios.get(`/trending/all/week?api_key=${APi_KEY}`);\n  return response.data.results;\n}\n\nexport async function searchMovies(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${APi_KEY}&language=en-US&page=1&query=${query}&include_adult=true`\n  );\n  return response.data;\n}\n\nexport async function movieDetails(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieCredits(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${APi_KEY}&language=en-US`\n  );\n  return response.data;\n}\n\nexport async function movieReviews(movieId) {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${APi_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n}\n","import React from 'react';\nimport { useFetchReviewsOfTheFilm } from 'hooks';\nimport { Text, UnorderedList, ListItem } from '@chakra-ui/react';\n\nfunction ReviewsView() {\n  const { review, isLoading } = useFetchReviewsOfTheFilm();\n\n  return (\n    <>\n      {isLoading && '...Loading'}\n      {review.length !== 0 ? (\n        <UnorderedList spacing={3}>\n          {review.map(({ id, author, content }) => (\n            <ListItem key={id}>\n              <Text as=\"h2\" fontWeight={700}>\n                Author: {author}\n              </Text>\n              <Text as=\"p\">{content}</Text>\n            </ListItem>\n          ))}\n        </UnorderedList>\n      ) : (\n        <Text fontSize=\"6xl\">No Reviews ¯\\_(ツ)_/¯</Text>\n      )}\n    </>\n  );\n}\n\nexport default ReviewsView;\n"],"names":["useFetchDetailsOneFilm","useState","filmDetails","setFilm","isLoading","setIsLoading","movieId","useParams","navigate","useNavigate","useEffect","isNaN","length","getMovie","movieDetails","movieData","console","log","message","useFetchCastOfTheFilm","cast","setCast","movieCredits","getMovies","useFetchSearchMovieOnRequest","searchQuery","filmsBySearch","setFilmsBySearch","searchMovies","films","results","toast","useFetchTrendingFilms","setFilms","getTrending","trendingFilms","useFetchReviewsOfTheFilm","review","setReview","movieReviews","propTypes","PropTypes","IMAGE_URL","axios","APi_KEY","response","data","query","spacing","map","id","author","content","as","fontWeight","fontSize"],"sourceRoot":""}